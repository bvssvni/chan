
Chan - Less than 100 LOC: Safe concurrency channels in C.
BSD license.
by Sven Nilsen, 2012
http://www.cutoutpro.com

Version: 0.001
in angular degrees versioning notation
http://isprogrammingeasy.blogspot.no/2012/08/angular-degrees-versioning-notation.html

How to compile example "chan-main.c" on Windows:

	gcc -Wall -o chan-main.exe chan-main.c -lpthread

How to compile example "chan=main.c" on OSX/Linux:

	gcc -Wall -o chan-main chan-main.c -lpthread

I have tested with:
- MinGW and Notepad++ on Windows XP 32 bit.
- Xcode command line tools on Mountain Lion OSX 64 bit.

As a pragmatic programmer, this library is written for _my_ needs, not yours.

Ref is a garbage collector that can be used with or without Chan.
To get Ref go to http://www.github.com/bvssvni/ref

________________________________________________________________________________
CHANNELS

Instead of making every function thread safe it is only necessary to make the 
communication between threads safe. The channels are unbuffered and
synchronized and multiplexing is turned off by default, since two-threads
communication easily leads to dead locks by human error.

How to use the macro:

// Include header.
#include "chan.h"

// Header stuff.
CHAN_TYPE_DECLARE(<type>)

// C file stuff.
CHAN_TYPE(<type>)

// This type of declaration resets to default values.
chan_<type> c = {};

// This type of declaration allows multiplexing on the channel.
chan_<type> c = {.mux = 1};

// When declaring an array of channels, use memset to set default values.
chan_<type> arr[3];
memset(arr, 0, sizeof(chan_<type>)*3);

// Read stuff.
int err = chan_<type>_read(chan_<type> *c, <type> *val);

// Write stuff, the struct is sent by value.
int err = chan_<type>_write(chan_<type> *c, <type> val);

// Read from any channel in array.
int err = chan_<type>_read_any(int cn, chan_<type> c[], <type> *val, int *index);

// Close channel.
chan_<type>.disconnected = 1;

// Check for new messages.
if (chan_<type>.unopened) printf("You got mail!\r\n");

// Activate multiplexing (off by default to avoid dead locks).
// This will cause threads waiting for the one writing to finish.
chan_<type>.mux = 1;

Check the returned value for errors on reading and writing:

CHAN_ERROR_DISCONNECTED

	When reading from any channel in an array, the disconnected ones
	will be ignored, but if all channels are disconnected, then the
	above error will be returned.
		
CHAN_ERROR_CAN_ONLY_HAVE_ONE_WRITER

	When multiplexing is off and one thread attempts to write while
	another thread is writing, the error above is returned.

CHAN_ERROR_CAN_ONLY_HAVE_ONE_READER

	When multiplexing is off and one thread attempts to read while
	another thread is reading, the error above is returned.
